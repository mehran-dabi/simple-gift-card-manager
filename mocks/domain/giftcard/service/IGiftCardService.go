// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "dono/domain/giftcard/dto"

	mock "github.com/stretchr/testify/mock"
)

// IGiftCardService is an autogenerated mock type for the IGiftCardService type
type IGiftCardService struct {
	mock.Mock
}

// AddGiftCard provides a mock function with given fields: ctx, price
func (_m *IGiftCardService) AddGiftCard(ctx context.Context, price int64) (*dto.GiftCard, error) {
	ret := _m.Called(ctx, price)

	var r0 *dto.GiftCard
	if rf, ok := ret.Get(0).(func(context.Context, int64) *dto.GiftCard); ok {
		r0 = rf(ctx, price)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GiftCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, price)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReceivedGiftCards provides a mock function with given fields: ctx, receiverID, statusFilter
func (_m *IGiftCardService) GetReceivedGiftCards(ctx context.Context, receiverID int64, statusFilter string) ([]*dto.GiftCard, error) {
	ret := _m.Called(ctx, receiverID, statusFilter)

	var r0 []*dto.GiftCard
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) []*dto.GiftCard); ok {
		r0 = rf(ctx, receiverID, statusFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.GiftCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, receiverID, statusFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendGiftCard provides a mock function with given fields: ctx, price, sender, receiver
func (_m *IGiftCardService) SendGiftCard(ctx context.Context, price int64, sender int64, receiver int64) error {
	ret := _m.Called(ctx, price, sender, receiver)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) error); ok {
		r0 = rf(ctx, price, sender, receiver)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGiftCardStatus provides a mock function with given fields: ctx, ID, status
func (_m *IGiftCardService) UpdateGiftCardStatus(ctx context.Context, ID int64, status string) error {
	ret := _m.Called(ctx, ID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, ID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIGiftCardService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIGiftCardService creates a new instance of IGiftCardService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIGiftCardService(t mockConstructorTestingTNewIGiftCardService) *IGiftCardService {
	mock := &IGiftCardService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
