// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "dono/domain/giftcard/entity"

	mock "github.com/stretchr/testify/mock"
)

// IGiftCardRepository is an autogenerated mock type for the IGiftCardRepository type
type IGiftCardRepository struct {
	mock.Mock
}

// AddGiftCard provides a mock function with given fields: ctx, price
func (_m *IGiftCardRepository) AddGiftCard(ctx context.Context, price int64) (*entity.GiftCard, error) {
	ret := _m.Called(ctx, price)

	var r0 *entity.GiftCard
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.GiftCard); ok {
		r0 = rf(ctx, price)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.GiftCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, price)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReceivedGiftCards provides a mock function with given fields: ctx, receiverID, statusFilter
func (_m *IGiftCardRepository) GetReceivedGiftCards(ctx context.Context, receiverID int64, statusFilter string) ([]*entity.GiftCard, error) {
	ret := _m.Called(ctx, receiverID, statusFilter)

	var r0 []*entity.GiftCard
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) []*entity.GiftCard); ok {
		r0 = rf(ctx, receiverID, statusFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.GiftCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, receiverID, statusFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendGiftCard provides a mock function with given fields: ctx, senderID, receiverID, giftCardID
func (_m *IGiftCardRepository) SendGiftCard(ctx context.Context, senderID int64, receiverID int64, giftCardID int64) error {
	ret := _m.Called(ctx, senderID, receiverID, giftCardID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) error); ok {
		r0 = rf(ctx, senderID, receiverID, giftCardID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGiftCardStatus provides a mock function with given fields: ctx, ID, status
func (_m *IGiftCardRepository) UpdateGiftCardStatus(ctx context.Context, ID int64, status string) error {
	ret := _m.Called(ctx, ID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, ID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIGiftCardRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIGiftCardRepository creates a new instance of IGiftCardRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIGiftCardRepository(t mockConstructorTestingTNewIGiftCardRepository) *IGiftCardRepository {
	mock := &IGiftCardRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
